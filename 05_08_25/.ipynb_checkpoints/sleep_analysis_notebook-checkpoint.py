{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sleep Dataset Analysis\n",
    "\n",
    "This notebook provides a comprehensive analysis of animal sleep patterns and their relationships with biological and ecological factors.\n",
    "\n",
    "## Dataset Variables:\n",
    "- **body_weight**: Body weight of the animal\n",
    "- **brain_weight**: Brain weight of the animal  \n",
    "- **max_life_span**: Maximum life span in years\n",
    "- **gestation_time**: Gestation time in days\n",
    "- **predation_index**: Index indicating predation risk (1-5 scale)\n",
    "- **sleep_exposure_index**: Index indicating sleep exposure risk (1-5 scale)\n",
    "- **danger_index**: Overall danger index (1-5 scale)\n",
    "- **total_sleep**: Total sleep time in hours"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Import Libraries and Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Set plotting style and parameters\n",
    "plt.style.use('default')\n",
    "sns.set_palette(\"husl\")\n",
    "plt.rcParams['figure.figsize'] = [12, 8]\n",
    "plt.rcParams['font.size'] = 11\n",
    "\n",
    "print(\"Libraries imported successfully!\")\n",
    "print(f\"Pandas version: {pd.__version__}\")\n",
    "print(f\"NumPy version: {np.__version__}\")\n",
    "print(f\"Matplotlib version: {plt.matplotlib.__version__}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Data Loading and Initial Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset\n",
    "# Note: Update the file path to match your CSV file location\n",
    "df = pd.read_csv('dataset_2191_sleep[1].csv')\n",
    "\n",
    "print(\"=== DATASET OVERVIEW ===\")\n",
    "print(f\"Dataset Shape: {df.shape}\")\n",
    "print(f\"Number of rows: {df.shape[0]}\")\n",
    "print(f\"Number of columns: {df.shape[1]}\")\n",
    "print(\"\\nColumn Names:\")\n",
    "print(df.columns.tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Display first few rows\n",
    "print(\"=== FIRST 10 ROWS OF DATA ===\")\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Basic data information\n",
    "print(\"=== DATA TYPES ===\")\n",
    "print(df.dtypes)\n",
    "print(\"\\n=== DATA INFO ===\")\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Data Cleaning and Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check for missing values (represented as '?' in the dataset)\n",
    "print(\"=== MISSING VALUES ANALYSIS ===\")\n",
    "print(\"Missing values before cleaning:\")\n",
    "print(df.isnull().sum())\n",
    "\n",
    "# Check for '?' values\n",
    "question_marks = (df == '?').sum()\n",
    "print(\"\\n'?' values in each column:\")\n",
    "print(question_marks[question_marks > 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace '?' with NaN and convert to numeric\n",
    "print(\"=== DATA CLEANING ===\")\n",
    "df_clean = df.replace('?', np.nan)\n",
    "\n",
    "# Convert all columns to numeric\n",
    "for col in df_clean.columns:\n",
    "    df_clean[col] = pd.to_numeric(df_clean[col], errors='coerce')\n",
    "\n",
    "print(\"Missing values after conversion:\")\n",
    "missing_summary = df_clean.isnull().sum()\n",
    "print(missing_summary[missing_summary > 0])\n",
    "print(f\"\\nTotal missing values: {df_clean.isnull().sum().sum()}\")\n",
    "print(f\"Percentage of missing data: {(df_clean.isnull().sum().sum() / (df_clean.shape[0] * df_clean.shape[1])) * 100:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create different versions of the dataset for analysis\n",
    "print(\"=== CREATING ANALYSIS DATASETS ===\")\n",
    "\n",
    "# Dataset with complete sleep data (main target variable)\n",
    "df_sleep_complete = df_clean.dropna(subset=['total_sleep']).copy()\n",
    "print(f\"Dataset with complete sleep data: {len(df_sleep_complete)} rows\")\n",
    "\n",
    "# Dataset with all missing values filled with median (for comprehensive analysis)\n",
    "df_filled = df_sleep_complete.copy()\n",
    "for col in df_filled.columns:\n",
    "    if df_filled[col].isnull().sum() > 0:\n",
    "        median_val = df_filled[col].median()\n",
    "        df_filled[col].fillna(median_val, inplace=True)\n",
    "        print(f\"Filled {col} missing values with median: {median_val:.2f}\")\n",
    "\n",
    "print(f\"\\nFinal analysis dataset: {len(df_filled)} rows with no missing values\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Descriptive Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Comprehensive descriptive statistics\n",
    "print(\"=== DESCRIPTIVE STATISTICS ===\")\n",
    "desc_stats = df_filled.describe()\n",
    "print(\"Basic Statistics:\")\n",
    "desc_stats.round(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Additional statistics\n",
    "print(\"=== ADDITIONAL STATISTICS ===\")\n",
    "additional_stats = pd.DataFrame({\n",
    "    'Median': df_filled.median(),\n",
    "    'Mode': df_filled.mode().iloc[0],\n",
    "    'Skewness': df_filled.skew(),\n",
    "    'Kurtosis': df_filled.kurtosis()\n",
    "})\n",
    "additional_stats.round(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Data Transformation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create log-transformed versions for highly skewed variables\n",
    "print(\"=== DATA TRANSFORMATIONS ===\")\n",
    "df_transformed = df_filled.copy()\n",
    "\n",
    "# Log transformations (adding 1 to handle zeros)\n",
    "df_transformed['log_body_weight'] = np.log10(df_transformed['body_weight'] + 1)\n",
    "df_transformed['log_brain_weight'] = np.log10(df_transformed['brain_weight'] + 1)\n",
    "df_transformed['log_max_life_span'] = np.log10(df_transformed['max_life_span'] + 1)\n",
    "df_transformed['log_gestation_time'] = np.log10(df_transformed['gestation_time'] + 1)\n",
    "\n",
    "# Create composite risk index\n",
    "df_transformed['combined_risk_index'] = (\n",
    "    df_transformed['predation_index'] + \n",
    "    df_transformed['sleep_exposure_index'] + \n",
    "    df_transformed['danger_index']\n",
    ") / 3\n",
    "\n",
    "# Create categorical variables\n",
    "df_transformed['sleep_category'] = pd.cut(\n",
    "    df_transformed['total_sleep'], \n",
    "    bins=[0, 5, 10, 15, 25], \n",
    "    labels=['Very Low (0-5h)', 'Low (5-10h)', 'Medium (10-15h)', 'High (15+h)']\n",
    ")\n",
    "\n",
    "df_transformed['body_weight_category'] = pd.cut(\n",
    "    df_transformed['log_body_weight'], \n",
    "    bins=4, \n",
    "    labels=['Small', 'Medium', 'Large', 'Very Large']\n",
    ")\n",
    "\n",
    "print(\"New variables created:\")\n",
    "new_vars = ['log_body_weight', 'log_brain_weight', 'log_max_life_span', 'log_gestation_time', \n",
    "           'combined_risk_index', 'sleep_category', 'body_weight_category']\n",
    "for var in new_vars:\n",
    "    print(f\"- {var}\")\n",
    "\n",
    "print(f\"\\nFinal dataset shape: {df_transformed.shape}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Sleep Pattern Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Comprehensive sleep pattern analysis\n",
    "plt.figure(figsize=(16, 12))\n",
    "\n",
    "# Histogram of sleep duration\n",
    "plt.subplot(2, 3, 1)\n",
    "plt.hist(df_transformed['total_sleep'], bins=15, alpha=0.7, color='skyblue', edgecolor='black')\n",
    "plt.title('Distribution of Total Sleep Time', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Total Sleep (hours)')\n",
    "plt.ylabel('Frequency')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Add statistics to the plot\n",
    "mean_sleep = df_transformed['total_sleep'].mean()\n",
    "median_sleep = df_transformed['total_sleep'].median()\n",
    "plt.axvline(mean_sleep, color='red', linestyle='--', label=f'Mean: {mean_sleep:.1f}h')\n",
    "plt.axvline(median_sleep, color='orange', linestyle='--', label=f'Median: {median_sleep:.1f}h')\n",
    "plt.legend()\n",
    "\n",
    "# Box plot\n",
    "plt.subplot(2, 3, 2)\n",
    "box_plot = plt.boxplot(df_transformed['total_sleep'], vert=True, patch_artist=True)\n",
    "box_plot['boxes'][0].set_facecolor('lightcoral')\n",
    "box_plot['boxes'][0].set_alpha(0.7)\n",
    "plt.title('Boxplot of Total Sleep Time', fontsize=14, fontweight='bold')\n",
    "plt.ylabel('Total Sleep (hours)')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Q-Q plot for normality\n",
    "plt.subplot(2, 3, 3)\n",
    "stats.probplot(df_transformed['total_sleep'], dist=\"norm\", plot=plt)\n",
    "plt.title('Q-Q Plot: Sleep vs Normal Distribution', fontsize=12, fontweight='bold')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Density plot\n",
    "plt.subplot(2, 3, 4)\n",
    "df_transformed['total_sleep'].plot(kind='density', alpha=0.7, color='green', linewidth=2)\n",
    "plt.title('Density Plot of Total Sleep Time', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Total Sleep (hours)')\n",
    "plt.ylabel('Density')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Sleep categories pie chart\n",
    "plt.subplot(2, 3, 5)\n",
    "sleep_counts = df_transformed['sleep_category'].value_counts()\n",
    "plt.pie(sleep_counts.values, labels=sleep_counts.index, autopct='%1.1f%%', startangle=90)\n",
    "plt.title('Distribution of Sleep Categories', fontsize=14, fontweight='bold')\n",
    "\n",
    "# Sleep statistics summary\n",
    "plt.subplot(2, 3, 6)\n",
    "plt.axis('off')\n",
    "sleep_stats = f\"\"\"\n",
    "SLEEP STATISTICS SUMMARY\n",
    "\n",
    "Mean: {df_transformed['total_sleep'].mean():.2f} hours\n",
    "Median: {df_transformed['total_sleep'].median():.2f} hours\n",
    "Std Dev: {df_transformed['total_sleep'].std():.2f} hours\n",
    "Min: {df_transformed['total_sleep'].min():.1f} hours\n",
    "Max: {df_transformed['total_sleep'].max():.1f} hours\n",
    "Range: {df_transformed['total_sleep'].max() - df_transformed['total_sleep'].min():.1f} hours\n",
    "\n",
    "Skewness: {df_transformed['total_sleep'].skew():.3f}\n",
    "Kurtosis: {df_transformed['total_sleep'].kurtosis():.3f}\n",
    "\n",
    "Animals analyzed: {len(df_transformed)}\n",
    "\"\"\"\n",
    "plt.text(0.1, 0.5, sleep_stats, fontsize=12, verticalalignment='center', \n",
    "         bbox=dict(boxstyle=\"round,pad=0.3\", facecolor=\"lightblue\", alpha=0.7))\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Body Size and Brain Size Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Body weight and brain weight relationship analysis\n",
    "plt.figure(figsize=(18, 6))\n",
    "\n",
    "# Original scale scatter plot\n",
    "plt.subplot(1, 3, 1)\n",
    "plt.scatter(df_transformed['body_weight'], df_transformed['brain_weight'], \n",
    "           alpha=0.6, color='purple', s=50)\n",
    "plt.title('Body Weight vs Brain Weight\\n(Original Scale)', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Body Weight')\n",
    "plt.ylabel('Brain Weight')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Add correlation coefficient\n",
    "corr_orig = df_transformed['body_weight'].corr(df_transformed['brain_weight'])\n",
    "plt.text(0.05, 0.95, f'Correlation: {corr_orig:.3f}', transform=plt.gca().transAxes, \n",
    "         bbox=dict(boxstyle=\"round\", facecolor='wheat', alpha=0.8))\n",
    "\n",
    "# Log scale scatter plot\n",
    "plt.subplot(1, 3, 2)\n",
    "plt.scatter(df_transformed['log_body_weight'], df_transformed['log_brain_weight'], \n",
    "           alpha=0.6, color='orange', s=50)\n",
    "plt.title('Log Body Weight vs Log Brain Weight\\n(Better Linear Relationship)', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Log Body Weight')\n",
    "plt.ylabel('Log Brain Weight')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Add correlation and regression line\n",
    "corr_log = df_transformed['log_body_weight'].corr(df_transformed['log_brain_weight'])\n",
    "plt.text(0.05, 0.95, f'Correlation: {corr_log:.3f}', transform=plt.gca().transAxes, \n",
    "         bbox=dict(boxstyle=\"round\", facecolor='wheat', alpha=0.8))\n",
    "\n",
    "# Add regression line\n",
    "z = np.polyfit(df_transformed['log_body_weight'], df_transformed['log_brain_weight'], 1)\n",
    "p = np.poly1d(z)\n",
    "plt.plot(df_transformed['log_body_weight'], p(df_transformed['log_body_weight']), \"r--\", alpha=0.8, linewidth=2)\n",
    "\n",
    "# Colored by sleep time\n",
    "plt.subplot(1, 3, 3)\n",
    "scatter = plt.scatter(df_transformed['log_body_weight'], df_transformed['log_brain_weight'], \n",
    "                     c=df_transformed['total_sleep'], cmap='viridis', alpha=0.7, s=60)\n",
    "plt.colorbar(scatter, label='Total Sleep (hours)')\n",
    "plt.title('Body-Brain Weight Relationship\\n(Colored by Sleep Time)', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Log Body Weight')\n",
    "plt.ylabel('Log Brain Weight')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Body size categories analysis\n",
    "plt.figure(figsize=(15, 5))\n",
    "\n",
    "# Sleep by body weight category\n",
    "plt.subplot(1, 3, 1)\n",
    "weight_sleep = df_transformed.groupby('body_weight_category')['total_sleep'].agg(['mean', 'std', 'count'])\n",
    "plt.bar(range(len(weight_sleep)), weight_sleep['mean'], \n",
    "        yerr=weight_sleep['std'], alpha=0.7, capsize=5)\n",
    "plt.xticks(range(len(weight_sleep)), weight_sleep.index, rotation=45)\n",
    "plt.title('Average Sleep by Body Weight Category', fontsize=14, fontweight='bold')\n",
    "plt.ylabel('Average Total Sleep (hours)')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Add sample sizes\n",
    "for i, (mean_val, count) in enumerate(zip(weight_sleep['mean'], weight_sleep['count'])):\n",
    "    plt.text(i, mean_val + 0.5, f'n={count}', ha='center', fontsize=10)\n",
    "\n",
    "# Body weight distribution\n",
    "plt.subplot(1, 3, 2)\n",
    "plt.hist(df_transformed['log_body_weight'], bins=20, alpha=0.7, color='green', edgecolor='black')\n",
    "plt.title('Distribution of Log Body Weight', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Log Body Weight')\n",
    "plt.ylabel('Frequency')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Brain weight distribution\n",
    "plt.subplot(1, 3, 3)\n",
    "plt.hist(df_transformed['log_brain_weight'], bins=20, alpha=0.7, color='red', edgecolor='black')\n",
    "plt.title('Distribution of Log Brain Weight', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Log Brain Weight')\n",
    "plt.ylabel('Frequency')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Risk Factors and Sleep Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Comprehensive risk factors analysis\n",
    "plt.figure(figsize=(18, 12))\n",
    "\n",
    "# Average sleep by predation index\n",
    "plt.subplot(2, 3, 1)\n",
    "predation_sleep = df_transformed.groupby('predation_index')['total_sleep'].agg(['mean', 'std', 'count'])\n",
    "bars1 = plt.bar(predation_sleep.index, predation_sleep['mean'], \n",
    "                yerr=predation_sleep['std'], alpha=0.7, color='red', capsize=5)\n",
    "plt.title('Average Sleep by Predation Index', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Predation Index')\n",
    "plt.ylabel('Average Total Sleep (hours)')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Add sample sizes\n",
    "for i, (idx, row) in enumerate(predation_sleep.iterrows()):\n",
    "    plt.text(idx, row['mean'] + 0.5, f\"n={row['count']}\", ha='center', fontsize=10)\n",
    "\n",
    "# Average sleep by sleep exposure index\n",
    "plt.subplot(2, 3, 2)\n",
    "exposure_sleep = df_transformed.groupby('sleep_exposure_index')['total_sleep'].agg(['mean', 'std', 'count'])\n",
    "bars2 = plt.bar(exposure_sleep.index, exposure_sleep['mean'], \n",
    "                yerr=exposure_sleep['std'], alpha=0.7, color='blue', capsize=5)\n",
    "plt.title('Average Sleep by Sleep Exposure Index', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Sleep Exposure Index')\n",
    "plt.ylabel('Average Total Sleep (hours)')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Add sample sizes\n",
    "for i, (idx, row) in enumerate(exposure_sleep.iterrows()):\n",
    "    plt.text(idx, row['mean'] + 0.5, f\"n={row['count']}\", ha='center', fontsize=10)\n",
    "\n",
    "# Average sleep by danger index\n",
    "plt.subplot(2, 3, 3)\n",
    "danger_sleep = df_transformed.groupby('danger_index')['total_sleep'].agg(['mean', 'std', 'count'])\n",
    "bars3 = plt.bar(danger_sleep.index, danger_sleep['mean'], \n",
    "                yerr=danger_sleep['std'], alpha=0.7, color='green', capsize=5)\n",
    "plt.title('Average Sleep by Danger Index', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Danger Index')\n",
    "plt.ylabel('Average Total Sleep (hours)')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Add sample sizes\n",
    "for i, (idx, row) in enumerate(danger_sleep.iterrows()):\n",
    "    plt.text(idx, row['mean'] + 0.5, f\"n={row['count']}\", ha='center', fontsize=10)\n",
    "\n",
    "# Box plots for distribution comparison\n",
    "plt.subplot(2, 3, 4)\n",
    "df_transformed.boxplot(column='total_sleep', by='predation_index', ax=plt.gca())\n",
    "plt.title('Sleep Distribution by Predation Index')\n",
    "plt.suptitle('')  # Remove automatic title\n",
    "plt.xlabel('Predation Index')\n",
    "plt.ylabel('Total Sleep (hours)')\n",
    "\n",
    "plt.subplot(2, 3, 5)\n",
    "df_transformed.boxplot(column='total_sleep', by='sleep_exposure_index', ax=plt.gca())\n",
    "plt.title('Sleep Distribution by Sleep Exposure Index')\n",
    "plt.suptitle('')\n",
    "plt.xlabel('Sleep Exposure Index')\n",
    "plt.ylabel('Total Sleep (hours)')\n",
    "\n",
    "plt.subplot(2, 3, 6)\n",
    "df_transformed.boxplot(column='total_sleep', by='danger_index', ax=plt.gca())\n",
    "plt.title('Sleep Distribution by Danger Index')\n",
    "plt.suptitle('')\n",
    "plt.xlabel('Danger Index')\n",
    "plt.ylabel('Total Sleep (hours)')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Combined risk analysis\n",
    "plt.figure(figsize=(15, 5))\n",
    "\n",
    "# Combined risk index vs sleep\n",
    "plt.subplot(1, 3, 1)\n",
    "plt.scatter(df_transformed['combined_risk_index'], df_transformed['total_sleep'], \n",
    "           alpha=0.6, color='red', s=60)\n",
    "# Add regression line\n",
    "z = np.polyfit(df_transformed['combined_risk_index'], df_transformed['total_sleep'], 1)\n",
    "p = np.poly1d(z)\n",
    "plt.plot(df_transformed['combined_risk_index'], p(df_transformed['combined_risk_index']), \n",
    "         \"b--\", alpha=0.8, linewidth=2)\n",
    "plt.title('Sleep vs Combined Risk Index', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Combined Risk Index')\n",
    "plt.ylabel('Total Sleep (hours)')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Add correlation\n",
    "corr_risk = df_transformed['combined_risk_index'].corr(df_transformed['total_sleep'])\n",
    "plt.text(0.05, 0.95, f'Correlation: {corr_risk:.3f}', transform=plt.gca().transAxes, \n",
    "         bbox=dict(boxstyle=\"round\", facecolor='wheat', alpha=0.8))\n",
    "\n",
    "# Risk indices distribution\n",
    "plt.subplot(1, 3, 2)\n",
    "risk_data = [df_transformed['predation_index'], \n",
    "             df_transformed['sleep_exposure_index'], \n",
    "             df_transformed['danger_index']]\n",
    "box_plot = plt.boxplot(risk_data, labels=['Predation', 'Sleep\\nExposure', 'Danger'], patch_artist=True)\n",
    "colors = ['lightcoral', 'lightblue', 'lightgreen']
for patch, color in zip(box_plot['boxes'], colors):
    patch.set_facecolor(color)
    patch.set_alpha(0.7)
plt.title('Distribution of Risk Indices', fontsize=14, fontweight='bold')
plt.ylabel('Risk Index Value')
plt.grid(True, alpha=0.3)

# High vs Low risk comparison
plt.subplot(1, 3, 3)
high_risk = df_transformed[df_transformed['combined_risk_index'] >= 4]['total_sleep']
low_risk = df_transformed[df_transformed['combined_risk_index'] <= 2]['total_sleep']
medium_risk = df_transformed[(df_transformed['combined_risk_index'] > 2) & 
                            (df_transformed['combined_risk_index'] < 4)]['total_sleep']

plt.boxplot([low_risk, medium_risk, high_risk], 
           labels=['Low Risk\n(≤2)', 'Medium Risk\n(2-4)', 'High Risk\n(≥4)'], 
           patch_artist=True)
plt.title('Sleep Distribution by Risk Level', fontsize=14, fontweight='bold')
plt.ylabel('Total Sleep (hours)')
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Life History Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Life span and gestation time relationships\n",
    "plt.figure(figsize=(18, 6))\n",
    "\n",
    "# Life span vs sleep\n",
    "plt.subplot(1, 3, 1)\n",
    "plt.scatter(df_transformed['max_life_span'], df_transformed['total_sleep'], \n",
    "           alpha=0.6, color='brown', s=60)\n",
    "# Add regression line\n",
    "z = np.polyfit(df_transformed['max_life_span'], df_transformed['total_sleep'], 1)\n",
    "p = np.poly1d(z)\n",
    "plt.plot(df_transformed['max_life_span'], p(df_transformed['max_life_span']), \n",
    "         \"r--\", alpha=0.8, linewidth=2)\n",
    "plt.title('Life Span vs Total Sleep', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Maximum Life Span (years)')\n",
    "plt.ylabel('Total Sleep (hours)')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Add correlation\n",
    "corr_life = df_transformed['max_life_span'].corr(df_transformed['total_sleep'])\n",
    "plt.text(0.05, 0.95, f'Correlation: {corr_life:.3f}', transform=plt.gca().transAxes,\n",
    "         bbox=dict(boxstyle=\"round\", facecolor='wheat', alpha=0.8))\n",
    "\n",
    "# Gestation time vs sleep\n",
    "plt.subplot(1, 3, 2)\n",
    "plt.scatter(df_transformed['gestation_time'], df_transformed['total_sleep'], \n",
    "           alpha=0.6, color='teal', s=60)\n",
    "# Add regression line\n",
    "z = np.polyfit(df_transformed['gestation_time'], df_transformed['total_sleep'], 1)\n",
    "p = np.poly1d(z)\n",
    "plt.plot(df_transformed['gestation_time'], p(df_transformed['gestation_time']), \n",
    "         \"r--\", alpha=0.8, linewidth=2)\n",
    "plt.title('Gestation Time vs Total Sleep', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Gestation Time (days)')\n",
    "plt.ylabel('Total Sleep (hours)')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "corr_gestation = df_transformed['gestation_time'].corr(df_transformed['total_sleep'])\n",
    "plt.text(0.05, 0.95, f'Correlation: {corr_gestation:.3f}', transform=plt.gca().transAxes,\n",
    "         bbox=dict(boxstyle=\"round\", facecolor='wheat', alpha=0.8))\n",
    "\n",
    "# Life span vs gestation time (colored by sleep)\n",
    "plt.subplot(1, 3, 3)\n",
    "scatter = plt.scatter(df_transformed['max_life_span'], df_transformed['gestation_time'], \n",
    "                     c=df_transformed['total_sleep'], cmap='plasma', alpha=0.7, s=60)\n",
    "plt.colorbar(scatter, label='Total Sleep (hours)')\n",
    "plt.title('Life Span vs Gestation Time\\n(Colored by Sleep)', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Maximum Life Span (years)')\n",
    "plt.ylabel('Gestation Time (days)')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Life history distributions\n",
    "plt.figure(figsize=(15, 5))\n",
    "\n",
    "# Life span distribution\n",
    "plt.subplot(1, 3, 1)\n",
    "plt.hist(df_transformed['max_life_span'], bins=20, alpha=0.7, color='purple', edgecolor='black')\n",
    "plt.title('Distribution of Maximum Life Span', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Maximum Life Span (years)')\n",
    "plt.ylabel('Frequency')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Add statistics\n",
    "mean_life = df_transformed['max_life_span'].mean()\n",
    "median_life = df_transformed['max_life_span'].median()\n",
    "plt.axvline(mean_life, color='red', linestyle='--', label=f'Mean: {mean_life:.1f}')\n",
    "plt.axvline(median_life, color='orange', linestyle='--', label=f'Median: {median_life:.1f}')\n",
    "plt.legend()\n",
    "\n",
    "# Gestation time distribution\n",
    "plt.subplot(1, 3, 2)\n",
    "plt.hist(df_transformed['gestation_time'], bins=20, alpha=0.7, color='orange', edgecolor='black')\n",
    "plt.title('Distribution of Gestation Time', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Gestation Time (days)')\n",
    "plt.ylabel('Frequency')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Add statistics\n",
    "mean_gestation = df_transformed['gestation_time'].mean()\n",
    "median_gestation = df_transformed['gestation_time'].median()\n",
    "plt.axvline(mean_gestation, color='red', linestyle='--', label=f'Mean: {mean_gestation:.0f}')\n",
    "plt.axvline(median_gestation, color='orange', linestyle='--', label=f'Median: {median_gestation:.0f}')\n",
    "plt.legend()\n",
    "\n",
    "# Life history categories vs sleep\n",
    "plt.subplot(1, 3, 3)\n",
    "# Create life span categories\n",
    "df_transformed['life_span_category'] = pd.cut(\n",
    "    df_transformed['max_life_span'], \n",
    "    bins=[0, 10, 25, 50, 100], \n",
    "    labels=['Short (0-10y)', 'Medium (10-25y)', 'Long (25-50y)', 'Very Long (50+y)']\n",
    ")\n",
    "\n",
    "life_sleep = df_transformed.groupby('life_span_category')['total_sleep'].agg(['mean', 'std', 'count'])\n",
    "plt.bar(range(len(life_sleep)), life_sleep['mean'], \n",
    "        yerr=life_sleep['std'], alpha=0.7, capsize=5, color='green')\n",
    "plt.xticks(range(len(life_sleep)), life_sleep.index, rotation=45)\n",
    "plt.title('Average Sleep by Life Span Category', fontsize=14, fontweight='bold')\n",
    "plt.ylabel('Average Total Sleep (hours)')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Add sample sizes\n",
    "for i, (mean_val, count) in enumerate(zip(life_sleep['mean'], life_sleep['count'])):\n",
    "    plt.text(i, mean_val + 0.5, f'n={count}', ha='center', fontsize=10)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10. Correlation Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Comprehensive correlation analysis\n",
    "plt.figure(figsize=(14, 10))\n",
    "\n",
    "# Select numeric columns for correlation\n",
    "numeric_cols = ['body_weight', 'brain_weight', 'max_life_span', 'gestation_time',\n",
    "               'predation_index', 'sleep_exposure_index', 'danger_index', 'total_sleep',\n",
    "               'log_body_weight', 'log_brain_weight', 'combined_risk_index']\n",
    "\n",
    "correlation_matrix = df_transformed[numeric_cols].corr()\n",
    "\n",
    "# Create heatmap\n",
    "mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0,\n",
    "            square=True, fmt='.3f', cbar_kws={\"shrink\": .8}, mask=mask)\n",
    "plt.title('Correlation Matrix Heatmap', fontsize=16, fontweight='bold', pad=20)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Top correlations with sleep\n",
    "print(\"=== CORRELATIONS WITH TOTAL SLEEP ===\")\n",
    "correlations_with_sleep = df_transformed[numeric_cols].corr()['total_sleep'].abs().sort_values(ascending=False)\n",
    "print(\"\\nStrongest correlations with Total Sleep:\")\n",
    "for var, corr in correlations_with_sleep.items():\n",
    "    if var != 'total_sleep':\n",
    "        actual_corr = df_transformed[var].corr(df_transformed['total_sleep'])\n",
    "        print(f\"{var:25}: {actual_corr:6.3f} (|{corr:.3f}|)\")\n",
    "\n",
    "# Correlation significance testing\n",
    "print(\"\\n=== CORRELATION SIGNIFICANCE TESTS ===\")\n",
    "from scipy.stats import pearsonr\n",
    "\n",
    "significant_correlations = []\n",
    "for var in numeric_cols:\n",
    "    if var != 'total_sleep':\n",
    "        corr_coef, p_value = pearsonr(df_transformed[var], df_transformed['total_sleep'])\n",
    "        if p_value < 0.05:\n",
    "            significant_correlations.append((var, corr_coef, p_value))\n",
    "            \n",
    "print(\"Significant correlations with sleep (p < 0.05):\")\n",
    "for var, corr, p in sorted(significant_correlations, key=lambda x: abs(x[1]), reverse=True):\n",
    "    print(f\"{var:25}: r={corr:6.3f}, p={p:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 11. Advanced Multi-Variable Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Advanced scatter plot matrix for key variables\n",
    "key_vars = ['total_sleep', 'log_body_weight', 'log_brain_weight', 'combined_risk_index', 'max_life_span']\n",
    "plt.figure(figsize=(16, 12))\n",
    "\n",
    "for i, var1 in enumerate(key_vars):\n",
    "    for j, var2 in enumerate(key_vars):\n",
    "        plt.subplot(len(key_vars), len(key_vars), i * len(key_vars) + j + 1)\n",
    "        \n",
    "        if i == j:\n",
    "            # Diagonal: histogram\n",
    "            plt.hist(df_transformed[var1], bins=15, alpha=0.7, color='skyblue')\n",
    "            plt.title(f'{var1}', fontsize=10)\n",
    "        else:\n",
    "            # Off-diagonal: scatter plot\n",
    "            plt.scatter(df_transformed[var2], df_transformed[var1], alpha=0.6, s=20)\n",
    "            # Add correlation coefficient\n",
    "            corr = df_transformed[var1].corr(df_transformed[var2])\n",
    "            plt.text(0.05, 0.95, f'r={corr:.2f}', transform=plt.gca().transAxes,\n",
    "                    bbox=dict(boxstyle=\"round,pad=0.3\", facecolor='white', alpha=0.8),\n",
    "                    fontsize=8)\n",
    "        \n",
    "        if i == len(key_vars) - 1:\n",
    "            plt.xlabel(var2, fontsize=9)\n",
    "        if j == 0:\n",
    "            plt.ylabel(var1, fontsize=9)\n",
    "        \n",
    "        plt.tick_params(axis='both', which='major', labelsize=8)\n",
    "        plt.grid(True, alpha=0.3)\n",
    "\n",
    "plt.suptitle('Scatter Plot Matrix: Key Variables', fontsize=16, fontweight='bold')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Multiple regression analysis visualization\n",
    "plt.figure(figsize=(18, 6))\n",
    "\n",
    "# Sleep vs body weight with risk level coloring\n",
    "plt.subplot(1, 3, 1)\n",
    "# Create risk categories\n",
    "df_transformed['risk_category'] = pd.cut(\n",
    "    df_transformed['combined_risk_index'], \n",
    "    bins=[0, 2, 3, 4, 5], \n",
    "    labels=['Low', 'Medium-Low', 'Medium-High', 'High']\n",
    ")\n",
    "\n",
    "colors = {'Low': 'green', 'Medium-Low': 'yellow', 'Medium-High': 'orange', 'High': 'red'}\n",
    "for category in df_transformed['risk_category'].unique():\n",
    "    if pd.notna(category):\n",
    "        subset = df_transformed[df_transformed['risk_category'] == category]\n",
    "        plt.scatter(subset['log_body_weight'], subset['total_sleep'], \n",
    "                   alpha=0.7, label=f'{category} Risk', color=colors[category], s=50)\n",
    "\n",
    "plt.title('Sleep vs Log Body Weight\\n(Colored by Risk Level)', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Log Body Weight')\n",
    "plt.ylabel('Total Sleep (hours)')\n",
    "plt.legend()\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Sleep vs life span with body size coloring\n",
    "plt.subplot(1, 3, 2)\n",
    "scatter = plt.scatter(df_transformed['max_life_span'], df_transformed['total_sleep'], \n",
    "                     c=df_transformed['log_body_weight'], cmap='viridis', alpha=0.7, s=50)\n",
    "plt.colorbar(scatter, label='Log Body Weight')\n",
    "plt.title('Sleep vs Life Span\\n(Colored by Body Size)', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Maximum Life Span (years)')\n",
    "plt.ylabel('Total Sleep (hours)')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# 3D-like plot: Risk vs Size vs Sleep\n",
    "plt.subplot(1, 3, 3)\n",
    "# Use bubble size to represent a third dimension\n",
    "sizes = (df_transformed['max_life_span'] - df_transformed['max_life_span'].min()) * 5 + 20\n",
    "scatter = plt.scatter(df_transformed['combined_risk_index'], df_transformed['total_sleep'], \n",
    "                     c=df_transformed['log_body_weight'], s=sizes, alpha=0.6, cmap='coolwarm')\n",
    "plt.colorbar(scatter, label='Log Body Weight')\n",
    "plt.title('Risk vs Sleep\\n(Size=Life Span, Color=Body Weight)', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Combined Risk Index')\n",
    "plt.ylabel('Total Sleep (hours)')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 12. Statistical Summary and Key Insights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Comprehensive statistical summary\n",
    "print(\"=\" * 60)\n",
    "print(\"         COMPREHENSIVE SLEEP DATASET ANALYSIS\")\n",
    "print(\"=\" * 60)\n",
    "\n",
    "print(\"\\n📊 DATASET OVERVIEW:\")\n",
    "print(f\"   • Total animals analyzed: {len(df_transformed)}\")\n",
    "print(f\"   • Variables examined: {len(df_transformed.columns)}\")\n",
    "print(f\"   • Missing data handled: {df.isnull().sum().sum()} values\")\n",
    "print(f\"   • Data completeness: {(1 - df.isnull().sum().sum()/(df.shape[0]*df.shape[1]))*100:.1f}%\")\n",
    "\n",
    "print(\"\\n😴 SLEEP PATTERNS:\")\n",
    "print(f\"   • Mean sleep duration: {df_transformed['total_sleep'].mean():.2f} hours\")\n",
    "print(f\"   • Median sleep duration: {df_transformed['total_sleep'].median():.2f} hours\")\n",
    "print(f\"   • Sleep range: {df_transformed['total_sleep'].min():.1f} - {df_transformed['total_sleep'].max():.1f} hours\")\n",
    "print(f\"   • Standard deviation: {df_transformed['total_sleep'].std():.2f} hours\")\n",
    "\n",
    "# Sleep categories distribution\n",
    "sleep_cat_dist = df_transformed['sleep_category'].value_counts()\n",
    "print(\"\\n   Sleep Categories:\")\n",
    "for cat, count in sleep_cat_dist.items():\n",
    "    percentage = (count / len(df_transformed)) * 100\n",
    "    print(f\"     - {cat}: {count} animals ({percentage:.1f}%)\")\n",
    "\n",
    "print(\"\\n⚠️ RISK FACTORS IMPACT:\")\n",
    "high_risk_animals = df_transformed[df_transformed['combined_risk_index'] >= 4]\n",
    "low_risk_animals = df_transformed[df_transformed['combined_risk_index'] <= 2]\n",
    "medium_risk_animals = df_transformed[(df_transformed['combined_risk_index'] > 2) & \n",
    "                                   (df_transformed['combined_risk_index'] < 4)]\n",
    "\n",
    "print(f\"   • High-risk animals (risk ≥ 4): {len(high_risk_animals)} animals\")\n",
    "print(f\"     - Average sleep: {high_risk_animals['total_sleep'].mean():.2f} hours\")\n",
    "print(f\"   • Medium-risk animals (2 < risk < 4): {len(medium_risk_animals)} animals\")\n",
    "print(f\"     - Average sleep: {medium_risk_animals['total_sleep'].mean():.2f} hours\")\n",
    "print(f\"   • Low-risk animals (risk ≤ 2): {len(low_risk_animals)} animals\")\n",
    "print(f\"     - Average sleep: {low_risk_animals['total_sleep'].mean():.2f} hours\")\n",
    "\n",
    "sleep_difference = low_risk_animals['total_sleep'].mean() - high_risk_animals['total_sleep'].mean()\n",
    "print(f\"   • Sleep difference (Low vs High risk): {sleep_difference:.2f} hours\")\n",
    "\n",
    "print(\"\\n🧠 BODY SIZE RELATIONSHIPS:\")\n",
    "body_sleep_corr = df_transformed['log_body_weight'].corr(df_transformed['total_sleep'])\n",
    "brain_sleep_corr = df_transformed['log_brain_weight'].corr(df_transformed['total_sleep'])\n",
    "body_brain_corr = df_transformed['log_body_weight'].corr(df_transformed['log_brain_weight'])\n",
    "\n",
    "print(f\"   • Body weight vs Sleep correlation: {body_sleep_corr:.3f}\")\n",
    "print(f\"   • Brain weight vs Sleep correlation: {brain_sleep_corr:.3f}\")\n",
    "print(f\"   • Body weight vs Brain weight correlation: {body_brain_corr:.3f}\")\n",
    "\n",
    "print(\"\\n🕐 LIFE HISTORY TRADE-OFFS:\")\n",
    "life_sleep_corr = df_transformed['max_life_span'].corr(df_transformed['total_sleep'])\n",
    "gestation_sleep_corr = df_transformed['gestation_time'].corr(df_transformed['total_sleep'])\n",
    "life_gestation_corr = df_transformed['max_life_span'].corr(df_transformed['gestation_time'])\n",
    "\n",
    "print(f\"   • Life span vs Sleep correlation: {life_sleep_corr:.3f}\")\n",
    "print(f\"   • Gestation time vs Sleep correlation: {gestation_sleep_corr:.3f}\")\n",
    "print(f\"   • Life span vs Gestation time correlation: {life_gestation_corr:.3f}\")\n",
    "\n",
    "print(\"\\n🔍 STRONGEST CORRELATIONS WITH SLEEP:\")\n",
    "sleep_correlations = df_transformed[numeric_cols].corr()['total_sleep'].abs().sort_values(ascending=False)\n",
    "top_5_correlations = sleep_correlations.head(6)[1:]  # Exclude self-correlation\n",
    "for var, abs_corr in top_5_correlations.items():\n",
    "    actual_corr = df_transformed[var].corr(df_transformed['total_sleep'])\n",
    "    print(f\"   • {var}: {actual_corr:.3f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Key insights and interpretations\n",
    "print(\"\\n\" + \"=\" * 60)\n",
    "print(\"                    KEY INSIGHTS\")\n",
    "print(\"=\" * 60)\n",
    "\n",
    "print(\"\\n🎯 MAIN FINDINGS:\")\n",
    "print(\"\\n1. RISK-SLEEP TRADE-OFF:\")\n",
    "print(\"   • Animals in high-danger environments sleep significantly less\")\n",
    "print(f\"   • {sleep_difference:.1f} hour difference between low and high-risk animals\")\n",
    "print(\"   • Evolutionary adaptation: less sleep = better survival in dangerous environments\")\n",
    "\n",
    "print(\"\\n2. BODY SIZE PARADOX:\")\n",
    "if body_sleep_corr < 0:\n",
    "    print(\"   • Larger animals tend to sleep LESS (negative correlation)\")\n",
    "    print(\"   • Possible explanations: metabolic constraints, foraging requirements\")\n",
    "else:\n",
    "    print(\"   • Larger animals tend to sleep MORE (positive correlation)\")\n",
    "    print(\"   • Possible explanations: reduced predation pressure, energy efficiency\")\n",
    "\n",
    "print(f\"   • Strong body-brain weight relationship (r={body_brain_corr:.3f})\")\n",
    "print(\"   • Brain size shows different sleep relationship than body size\")\n",
    "\n",
    "print(\"\\n3. LIFE HISTORY PATTERNS:\")\n",
    "if life_sleep_corr < 0:\n",
    "    print(\"   • Longer-lived animals sleep LESS\")\n",
    "    print(\"   • Trade-off between longevity and sleep duration\")\n",
    "else:\n",
    "    print(\"   • Longer-lived animals sleep MORE\")\n",
    "    print(\"   • Sleep may contribute to longevity and health\")\n",
    "\n",
    "print(\"\\n4. SLEEP DIVERSITY:\")\n",
    "cv_sleep = (df_transformed['total_sleep'].std() / df_transformed['total_sleep'].mean()) * 100\n",
    "print(f\"   • High variability in sleep patterns (CV = {cv_sleep:.1f}%)\")\n",
    "print(f\"   • Range spans {df_transformed['total_sleep'].max() - df_transformed['total_sleep'].min():.1f} hours\")\n",
    "print(\"   • Reflects diverse ecological niches and evolutionary strategies\")\n",
    "\n",
    "print(\"\\n📈 METHODOLOGICAL INSIGHTS:\")\n",
    "print(\"   • Log transformations revealed clearer relationships\")\n",
    "print(\"   • Combined risk indices provided better predictive power\")\n",
    "print(\"   • Multiple visualization approaches uncovered different patterns\")\n",
    "print(\"   • Statistical significance confirmed key relationships\")\n",
    "\n",
    "print(\"\\n🔬 FUTURE RESEARCH DIRECTIONS:\")\n",
    "print(\"   • Species classification analysis (mammals, birds, etc.)\")\n",
    "print(\"   • Phylogenetic comparative analysis\")\n",
    "print(\"   • Machine learning prediction models\")\n",
    "print(\"   • Circadian rhythm pattern analysis\")\n",
    "print(\"   • Environmental factor inclusion (temperature, habitat)\")\n",
    "\n",
    "print(\"\\n\" + \"=\" * 60)\n",
    "print(\"Analysis completed successfully! 🎉\")\n",
    "print(\"=\" * 60)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 13. Export Results (Optional)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Export cleaned and transformed dataset\n",
    "# Uncomment the following lines to save the processed data\n",
    "\n",